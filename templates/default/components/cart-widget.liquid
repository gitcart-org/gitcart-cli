<!-- Cart Widget -->
<div class="cart-widget relative">
  <button class="cart-toggle flex items-center space-x-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
          onclick="toggleCartDropdown()">
    <div class="relative">
      <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5-5M7 13l-2.5 5M17 21a2 2 0 100-4 2 2 0 000 4zM9 21a2 2 0 100-4 2 2 0 000 4z"></path>
      </svg>
      <span class="cart-count absolute -top-2 -right-2 bg-blue-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold" 
            data-cart-count="0" style="display: none;">0</span>
    </div>
    <div class="hidden sm:block">
      <div class="text-sm font-medium">{{ 'Cart' | t: current_language }}</div>
      <div class="text-xs text-gray-500 dark:text-gray-400">
        <span data-cart-total="0">0 {{ current_language_data.currency }}</span>
      </div>
    </div>
  </button>
  
  <!-- Cart Dropdown -->
  <div class="cart-dropdown absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 opacity-0 invisible transform translate-y-1 transition-all duration-200 z-50">
    <div class="p-4">
      <!-- Cart Header -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
          {{ 'Shopping Cart' | t: current_language }}
        </h3>
        <button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" onclick="toggleCartDropdown()">
          <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Cart Items -->
      <div class="cart-items space-y-3 mb-4 max-h-60 overflow-y-auto" data-cart-items>
        <!-- Empty cart message -->
        <div class="empty-cart text-center py-8 text-gray-500 dark:text-gray-400">
          <svg class="h-12 w-12 mx-auto mb-4 text-gray-300 dark:text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5-5M7 13l-2.5 5M17 21a2 2 0 100-4 2 2 0 000 4zM9 21a2 2 0 100-4 2 2 0 000 4z"></path>
          </svg>
          <p>{{ 'Your cart is empty' | t: current_language }}</p>
          <button class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 text-sm mt-2"
                  onclick="toggleCartDropdown()">
            {{ 'Start shopping' | t: current_language }}
          </button>
        </div>
      </div>
      
      <!-- Cart Footer -->
      <div class="cart-footer border-t border-gray-200 dark:border-gray-700 pt-4" style="display: none;">
        <!-- Cart Total -->
        <div class="flex items-center justify-between mb-4">
          <span class="text-lg font-semibold text-gray-900 dark:text-white">
            {{ 'Total' | t: current_language }}:
          </span>
          <span class="text-lg font-bold text-blue-600 dark:text-blue-400" data-cart-total-display>
            0 {{ current_language_data.currency }}
          </span>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex space-x-2">
          <a href="/cart/" 
             class="flex-1 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-900 dark:text-white py-2 px-4 rounded font-medium text-center transition-colors">
            {{ 'View Cart' | t: current_language }}
          </a>
          <a href="/checkout/" 
             class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded font-medium text-center transition-colors">
            {{ 'Checkout' | t: current_language }}
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Cart Widget JavaScript
function toggleCartDropdown() {
  const dropdown = document.querySelector('.cart-dropdown');
  const isVisible = !dropdown.classList.contains('opacity-0');
  
  if (isVisible) {
    dropdown.classList.add('opacity-0', 'invisible', 'translate-y-1');
  } else {
    dropdown.classList.remove('opacity-0', 'invisible', 'translate-y-1');
    updateCartDisplay();
  }
}

function updateCartDisplay() {
  if (typeof GitCart === 'undefined') return;
  
  const items = GitCart.cart.getItems();
  const itemCount = GitCart.cart.getItemCount();
  const total = GitCart.cart.getTotal();
  
  // Update cart count badge
  const countBadge = document.querySelector('[data-cart-count]');
  if (countBadge) {
    countBadge.textContent = itemCount;
    countBadge.style.display = itemCount > 0 ? 'flex' : 'none';
  }
  
  // Update cart total in toggle
  const totalElement = document.querySelector('[data-cart-total]');
  if (totalElement) {
    totalElement.textContent = `${total} {{ current_language_data.currency }}`;
  }
  
  // Update cart items in dropdown
  const itemsContainer = document.querySelector('[data-cart-items]');
  const emptyCart = itemsContainer.querySelector('.empty-cart');
  const cartFooter = document.querySelector('.cart-footer');
  
  if (items.length === 0) {
    emptyCart.style.display = 'block';
    cartFooter.style.display = 'none';
    
    // Clear existing items
    const existingItems = itemsContainer.querySelectorAll('.cart-item');
    existingItems.forEach(item => item.remove());
  } else {
    emptyCart.style.display = 'none';
    cartFooter.style.display = 'block';
    
    // Clear existing items
    const existingItems = itemsContainer.querySelectorAll('.cart-item');
    existingItems.forEach(item => item.remove());
    
    // Add current items
    items.forEach((item, index) => {
      const itemElement = createCartItemElement(item, index);
      itemsContainer.appendChild(itemElement);
    });
    
    // Update total in footer
    const totalDisplay = document.querySelector('[data-cart-total-display]');
    if (totalDisplay) {
      totalDisplay.textContent = `${total} {{ current_language_data.currency }}`;
    }
  }
}

function createCartItemElement(item, index) {
  const div = document.createElement('div');
  div.className = 'cart-item flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded';
  
  div.innerHTML = `
    <div class="flex-shrink-0">
      ${item.image ? 
        `<img src="${item.image}" alt="${item.title}" class="h-12 w-12 object-cover rounded">` :
        `<div class="h-12 w-12 bg-gray-200 dark:bg-gray-600 rounded flex items-center justify-center">
          <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
        </div>`
      }
    </div>
    <div class="flex-1 min-w-0">
      <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">${item.title}</h4>
      <div class="flex items-center justify-between mt-1">
        <div class="flex items-center space-x-2">
          <button onclick="changeQuantity('${item.sku}', ${item.quantity - 1})" 
                  class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
            </svg>
          </button>
          <span class="text-sm text-gray-600 dark:text-gray-400 min-w-[2rem] text-center">${item.quantity}</span>
          <button onclick="changeQuantity('${item.sku}', ${item.quantity + 1})" 
                  class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          </button>
        </div>
        <div class="flex items-center space-x-2">
          <span class="text-sm font-medium text-gray-900 dark:text-white">${item.price * item.quantity} {{ current_language_data.currency }}</span>
          <button onclick="removeFromCart('${item.sku}')" 
                  class="text-red-400 hover:text-red-600 dark:hover:text-red-300">
            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  `;
  
  return div;
}

function changeQuantity(sku, newQuantity) {
  if (typeof GitCart !== 'undefined' && newQuantity > 0) {
    GitCart.cart.updateQuantity(sku, newQuantity);
    updateCartDisplay();
  } else if (newQuantity <= 0) {
    removeFromCart(sku);
  }
}

function removeFromCart(sku) {
  if (typeof GitCart !== 'undefined') {
    GitCart.cart.remove(sku);
    updateCartDisplay();
  }
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
  const cartWidget = document.querySelector('.cart-widget');
  const dropdown = document.querySelector('.cart-dropdown');
  
  if (cartWidget && dropdown && !cartWidget.contains(event.target)) {
    dropdown.classList.add('opacity-0', 'invisible', 'translate-y-1');
  }
});

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  updateCartDisplay();
  
  // Listen for cart events if GitCart is available
  if (typeof GitCart !== 'undefined') {
    GitCart.on('gitcart:cart:updated', updateCartDisplay);
    GitCart.on('gitcart:cart:item:added', updateCartDisplay);
    GitCart.on('gitcart:cart:item:removed', updateCartDisplay);
  }
});
</script>